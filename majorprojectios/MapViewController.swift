import MapKit
import Alamofire
import SwiftyJSON
import CoreLocation

class MapViewController: UIViewController, MKMapViewDelegate, CLLocationManagerDelegate, UISearchBarDelegate {
	
	/// Error code generated by Alamofire if no connection established
	let offlineErrorCode = -1004
	let SUCCESS_CODE = 200
	let getVenueURL = "http://192.168.1.65:54321/api/venue/search"
	let savevenueURL = "http://192.168.1.65:54321/api/venue/"
	@IBOutlet weak var searchBar: UISearchBar!
	@IBOutlet weak var mapView: MKMapView!
	
	// start all users in belfast
	let locationManager = CLLocationManager()
	var searchText = ""
	var venueArray = [String]()
	var annotationArray: [MKPointAnnotation] = []
	
	override func viewDidLoad() {
		super.viewDidLoad()
		mapView.delegate = self
		searchBar.delegate = self
		establishLocationManager()
		let lat = locationManager.location?.coordinate.latitude
		let lng = locationManager.location?.coordinate.longitude
		let center = CLLocationCoordinate2D(latitude: lat!, longitude: lng!)
		let span = MKCoordinateSpanMake(0.05, 0.05)
		let region = MKCoordinateRegion(center: center, span: span)
		mapView.setRegion(region, animated: true)
	}
	
	func establishLocationManager(){
		searchBar.delegate = self
		locationManager.delegate = self
		locationManager.requestWhenInUseAuthorization()
		locationManager.requestAlwaysAuthorization()
		locationManager.desiredAccuracy = kCLLocationAccuracyBest
		locationManager.startUpdatingLocation()
		mapView.showsUserLocation = true
	}
	
	/// MARK: Location delegate methods
	func locationManager(manager: CLLocationManager, didUpdateLocations locations: [CLLocation]) {
		let location = locations.last
	}
	
	func locationManager(manager: CLLocationManager, didFailWithError error: NSError) {
		print("Failed to find user's location: \(error.localizedDescription)")
	}
	
	func searchBarSearchButtonClicked(searchBar: UISearchBar) {
		let annotationsToRemove = mapView.annotations.filter { $0 !== mapView.userLocation }
		mapView.removeAnnotations(annotationsToRemove)
		annotationArray.removeAll()
		searchText = searchBar.text!
		searchVenues()
		searchBar.endEditing(true)
	}
	
	func searchVenues() {
		
		let latitude:String = "\(locationManager.location!.coordinate.latitude)"
		let longitude:String = "\(locationManager.location!.coordinate.longitude)"
		
		let venueParameters = [ "venueType": searchText,
		                        "latitude": latitude,
		                        "longitude": longitude
		]
		
		let alamoManager = Manager.sharedInstance
		alamoManager.session.configuration.HTTPAdditionalHeaders = [
			"Content-Type":"application/json"
		]
		
		/// Alamofire request made with validated params returend with the response.
		alamoManager.request(.POST,getVenueURL,parameters: venueParameters, encoding: .JSON).validate().responseJSON { [weak self] serverResponse in
			
			/// SwiftyJSON used to easily parse JSON response, code sent by response includes message that is passed to message functions for display
			let errorData = serverResponse.data
			let responseData = String(data: errorData!, encoding: NSUTF8StringEncoding)
			
			if serverResponse.response!.statusCode != 200 {
				self!.alertMessage("None found", alertMessage: responseData!)
				return
			}
			if let data = serverResponse.result.value {
				let jsonResult = JSON(data)
				for (index, object) in jsonResult {
					let venueName = object["name"].stringValue
					let venueAddress = object["formatted_address"].stringValue
					var venueLati = object["lat"].double
					var venueLngi = object["lng"].double
					let venueLat = object["lat"].stringValue
					let venueLng = object["lng"].stringValue
					self!.venueArray.append(venueName)
					self!.venueArray.append(venueAddress)
					self!.venueArray.append(venueLat)
					self!.venueArray.append(venueLng)
					
					let annotation = MKPointAnnotation()
					var points:CLLocationCoordinate2D = CLLocationCoordinate2DMake(venueLati!, venueLngi!);
					annotation.title = object["name"].stringValue
					annotation.subtitle = object["formatted_address"].stringValue
					annotation.coordinate = points
					self!.annotationArray.append(annotation)
					self!.mapView.addAnnotations(self!.annotationArray)
				}
			}
			self!.centerMapOnResult(self!.annotationArray[0], regionRadius: 2000.0)
		}
		
	}
	
	func centerMapOnResult(location: MKPointAnnotation, regionRadius: Double){
		let coordinatesRegion = MKCoordinateRegionMakeWithDistance(location.coordinate, regionRadius * 2.0, regionRadius * 2.0)
		mapView.setRegion(coordinatesRegion, animated: true)
	}
	
	func mapView(mapView: MKMapView, viewForAnnotation annotation: MKAnnotation) -> MKAnnotationView? {
		
		if annotation.isMemberOfClass(MKUserLocation.self) {
			return nil
		}
		let pinIdentifier = "pin"
		var resultPin = mapView.dequeueReusableAnnotationViewWithIdentifier(pinIdentifier) as? MKPinAnnotationView
		if resultPin == nil {
			resultPin = MKPinAnnotationView(annotation: annotation, reuseIdentifier: pinIdentifier)
			resultPin!.pinTintColor = UIColor.redColor()
			resultPin!.animatesDrop = true
			resultPin!.canShowCallout = true
			resultPin!.rightCalloutAccessoryView = UIButton(type: .ContactAdd)
		} else {
			resultPin!.annotation = annotation
		}
		return resultPin
	}
	
	func mapView(mapView: MKMapView, annotationView view: MKAnnotationView, calloutAccessoryControlTapped control: UIControl) {
		if control == view.rightCalloutAccessoryView {
			let name = view.annotation!.title! as String!
			let address = view.annotation!.subtitle! as String!
			let lat = view.annotation!.coordinate.latitude
			let lng = view.annotation!.coordinate.longitude
			
			let selectedVenue: [String:AnyObject] = ["venueName" : name,
			                                         "venueAddress": address,
			                                         "venueLatitude":lat,
			                                         "venueLongitude":lng
			]
			
			saveVenue(selectedVenue)
			
		}
	}
	
	func saveVenue(savedVenue: Dictionary<String, AnyObject>) {
		
		let alamoManager = Manager.sharedInstance
		alamoManager.session.configuration.HTTPAdditionalHeaders = [
			"Content-Type":"application/json"
		]
		
		/// Alamofire request made with validated params returend with the response.
		alamoManager.request(.POST,savevenueURL,parameters: savedVenue, encoding: .JSON).validate().responseJSON { [weak self] serverResponse in
			
			/// SwiftyJSON used to easily parse JSON response, code sent by response includes message that is passed to message functions for display
			let errorData = serverResponse.data
			let responseData = String(data: errorData!, encoding: NSUTF8StringEncoding)
			
			// Before attempting to parse result, check if server is offline
			if serverResponse.result.error!.code == self!.offlineErrorCode {
				self!.alertMessage("Connection Error", alertMessage: "We can't reach the service at the moment. Please contact the admin.")
				return
			}
			
			if serverResponse.response!.statusCode != self!.SUCCESS_CODE  {
				self!.alertMessage("Invalid details", alertMessage: responseData!)
			}
			self!.alertMessage("Success!", alertMessage: responseData!)
		}
	}
	
	
	
	/// Once called, moves to a new storyboard identified as 'InitialController' in the main storyboard after login
	func moveToTrip(){
		self.performSegueWithIdentifier("back", sender: self)
	}
	
		/// Popup alert that can be dismissed. Used to inform/warn the user as a result of their action not being accepted.
		///
		/// - Parameter alertTitle: String used as title of the alert popup
		/// - Parameter alertMessage: String used as body of the alert popup
		func alertMessage(alertTitle: String, alertMessage: String){
			let alert = UIAlertController(title: alertTitle, message: alertMessage, preferredStyle: .Alert)
			alert.addAction(UIAlertAction(title: "OK", style: .Default) { _ in })
			self.presentViewController(alert, animated: true, completion: nil)
		}
}