import MapKit
import Alamofire
import SwiftyJSON
import CoreLocation

class MapViewController: UIViewController, MKMapViewDelegate, CLLocationManagerDelegate, UISearchBarDelegate {
    
    /// Error code generated by Alamofire if no connection established
    let offlineErrorCode = -1004
    let getEvents = "http://192.168.1.65:54321/api/venue/search"
    @IBOutlet weak var searchBar: UISearchBar!
    @IBOutlet weak var mapView: MKMapView!
    
    // start all users in belfast
    let startLocation = CLLocationCoordinate2D(latitude: 54.599181, longitude: -5.931083)
    let distanceSpan:Double = 500
    let locationManager = CLLocationManager()
    var searchText = ""
    var venueArray = [String]()
    var annotations = NSMutableArray()
    
    override func viewDidLoad() {
        establishLocationManager()
        self.searchBar.delegate = self
    }
    
    func establishLocationManager(){
        searchBar.delegate = self
        locationManager.delegate = self
        locationManager.requestWhenInUseAuthorization()
        locationManager.requestAlwaysAuthorization()
        locationManager.desiredAccuracy = kCLLocationAccuracyBest
        locationManager.startUpdatingLocation()
        mapView.showsUserLocation = true
    }
    
    /// MARK: Location delegate methods
    func locationManager(manager: CLLocationManager, didUpdateLocations locations: [CLLocation]) {
        let location = locations.last
        let center = CLLocationCoordinate2D(latitude: location!.coordinate.latitude, longitude: location!.coordinate.longitude)
        let region = MKCoordinateRegion(center: center, span: MKCoordinateSpan(latitudeDelta: 1, longitudeDelta: 1))
        
    }
    
    func locationManager(manager: CLLocationManager, didFailWithError error: NSError) {
        print("Failed to find user's location: \(error.localizedDescription)")
    }
    
    func searchBarSearchButtonClicked(searchBar: UISearchBar) {
        searchText = searchBar.text!
        searchVenues()
    }
    
    func searchVenues() {
        var numberVenues = 0
        let latitude:String = "\(locationManager.location!.coordinate.latitude)"
        let longitude:String = "\(locationManager.location!.coordinate.longitude)"
        
        let venueParameters = [ "venueType": searchText,
                                "latitude": latitude,
                                "longitude": longitude
        ]
        
        let alamoManager = Manager.sharedInstance
        alamoManager.session.configuration.HTTPAdditionalHeaders = [
            "Content-Type":"application/json"
        ]
        
        /// Alamofire request made with validated params returend with the response.
        alamoManager.request(.POST,getEvents,parameters: venueParameters, encoding: .JSON).validate().responseJSON { [weak self] serverResponse in
            
            
            /// SwiftyJSON used to easily parse JSON response, code sent by response includes message that is passed to message functions for display
            let data = serverResponse.data
            let responseData = String(data: data!, encoding: NSUTF8StringEncoding)
            
            /// Switch on the HTTP code response from the service
            switch serverResponse.response!.statusCode {
            case 200:
                let jsonResult = JSON(serverResponse.result.value!)
                numberVenues = jsonResult.count // server returns max of 10 each time
                print(jsonResult)
                var annotation = MKPointAnnotation()
                for i in 0...numberVenues {
                    var venueName = jsonResult[i]["name"].stringValue as String!
                    var venueAddress = jsonResult[i]["formatted_address"].stringValue as String!
                    var venueLat = jsonResult[i]["lat"].stringValue as String!
                    var venueLng = jsonResult[i]["lng"].stringValue as String!
                    self!.venueArray.append(venueName)
                    self!.venueArray.append(venueAddress)
                    self!.venueArray.append(venueLat)
                    self!.venueArray.append(venueLng)
                    
                    //annotation.coordinate.latitude = venueArray["lat"]
                    //annotation.coordinate.longitude = venueArray["lng"]
                    //annotation.setCoordinate(venueArray["lat"] as String! + venueArray["lng"] as String!)
                    /*
                    var venueLocation:CLLocationCoordinate2D = CLLocationCoordinate2DMake(venueLat, venueLng)
                    var annotation = MKPointAnnotation()
                    annotation.coordinate = venueLocation
                    annotation.title = self?.venueArray["name"] as String!
                    self?.mapView.addAnnotation(annotation)
                    */
                }
                print(self!.venueArray)
                break
            case 400:
                self!.alertMessage("Invalid details", alertMessage: responseData!)
                break
            default: break
            }
        }
    }
    
    
/// Popup alert that can be dismissed. Used to inform/warn the user as a result of their action not being accepted.
///
/// - Parameter alertTitle: String used as title of the alert popup
/// - Parameter alertMessage: String used as body of the alert popup
func alertMessage(alertTitle: String, alertMessage: String){
    let alert = UIAlertController(title: alertTitle, message: alertMessage, preferredStyle: .Alert)
    alert.addAction(UIAlertAction(title: "OK", style: .Default) { _ in })
    self.presentViewController(alert, animated: true, completion: nil)
}
}