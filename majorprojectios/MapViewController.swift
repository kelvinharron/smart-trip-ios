import MapKit
import Alamofire
import SwiftyJSON
import CoreLocation

class MapViewController: UIViewController, MKMapViewDelegate, CLLocationManagerDelegate, UISearchBarDelegate {
    
    /// Error code generated by Alamofire if no connection established
    let offlineErrorCode = -1004
    let getEvents = "http://192.168.1.65:54321/api/venue/search"
    @IBOutlet weak var searchBar: UISearchBar!
    @IBOutlet weak var mapView: MKMapView!
    
    // start all users in belfast
    let locationManager = CLLocationManager()
    var searchText = ""
    var venueArray = [String]()
    var annotationArray: [MKPointAnnotation] = []
    
    override func viewDidLoad() {
        establishLocationManager()
        self.searchBar.delegate = self
        let lat = locationManager.location?.coordinate.latitude
        let lng = locationManager.location?.coordinate.longitude
        let center = CLLocationCoordinate2D(latitude: lat!, longitude: lng!)
        let span = MKCoordinateSpanMake(0.05, 0.05)
        let region = MKCoordinateRegion(center: center, span: span)
        mapView.setRegion(region, animated: true)
    }
    
    func establishLocationManager(){
        searchBar.delegate = self
        locationManager.delegate = self
        locationManager.requestWhenInUseAuthorization()
        locationManager.requestAlwaysAuthorization()
        locationManager.desiredAccuracy = kCLLocationAccuracyBest
        locationManager.startUpdatingLocation()
        mapView.showsUserLocation = true
    }
    
    /// MARK: Location delegate methods
    func locationManager(manager: CLLocationManager, didUpdateLocations locations: [CLLocation]) {
        let location = locations.last
    }
    
    func locationManager(manager: CLLocationManager, didFailWithError error: NSError) {
        print("Failed to find user's location: \(error.localizedDescription)")
    }
    
    func searchBarSearchButtonClicked(searchBar: UISearchBar) {
        let annotationsToRemove = mapView.annotations.filter { $0 !== mapView.userLocation }
        mapView.removeAnnotations(annotationsToRemove)
        annotationArray.removeAll()
        searchText = searchBar.text!
        searchVenues()
        searchBar.endEditing(true)
    }
    
    func searchVenues() {
        
        let latitude:String = "\(locationManager.location!.coordinate.latitude)"
        let longitude:String = "\(locationManager.location!.coordinate.longitude)"
        
        let venueParameters = [ "venueType": searchText,
                                "latitude": latitude,
                                "longitude": longitude
        ]
        
        let alamoManager = Manager.sharedInstance
        alamoManager.session.configuration.HTTPAdditionalHeaders = [
            "Content-Type":"application/json"
        ]
        
        /// Alamofire request made with validated params returend with the response.
        alamoManager.request(.POST,getEvents,parameters: venueParameters, encoding: .JSON).validate().responseJSON { [weak self] serverResponse in
            
            /// SwiftyJSON used to easily parse JSON response, code sent by response includes message that is passed to message functions for display
            let data = serverResponse.data
             let jsonResult = JSON(serverResponse.result.value!)
            if serverResponse.response!.statusCode != 200 {
                self!.alertMessage("Error", alertMessage: "Unable to reach server. Please try agai")
            }
            for (index, object) in jsonResult {
                let venueName = object["name"].stringValue
                let venueAddress = object["formatted_address"].stringValue
                var venueLati = object["lat"].double
                var venueLngi = object["lng"].double
                let venueLat = object["lat"].stringValue
                let venueLng = object["lng"].stringValue
                self!.venueArray.append(venueName)
                self!.venueArray.append(venueAddress)
                self!.venueArray.append(venueLat)
                self!.venueArray.append(venueLng)
                
                let annotation = MKPointAnnotation()
                var points:CLLocationCoordinate2D = CLLocationCoordinate2DMake(venueLati!, venueLngi!);
                annotation.title = object["name"].stringValue
                annotation.subtitle = object["formatted_address"].stringValue
                annotation.coordinate = points
                self!.annotationArray.append(annotation)
            }
            self!.mapView.addAnnotations(self!.annotationArray)
        }
        
    }
    
    
    /// Popup alert that can be dismissed. Used to inform/warn the user as a result of their action not being accepted.
    ///
    /// - Parameter alertTitle: String used as title of the alert popup
    /// - Parameter alertMessage: String used as body of the alert popup
    func alertMessage(alertTitle: String, alertMessage: String){
        let alert = UIAlertController(title: alertTitle, message: alertMessage, preferredStyle: .Alert)
        alert.addAction(UIAlertAction(title: "OK", style: .Default) { _ in })
        self.presentViewController(alert, animated: true, completion: nil)
    }
}